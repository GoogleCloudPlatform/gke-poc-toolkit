steps:
- name: 'gcr.io/cloud-builders/gcloud:latest'
  id: create-test-project
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    if [ -n "$_HEAD_REPO_URL" ]
    then 
      echo "‚¨ÜÔ∏è THIS IS A PR- _HEAD_REPO_URL is set ($_HEAD_REPO_URL)" 
      RAW_REPO_NAME="$_HEAD_REPO_URL//terraform/modules/"
      export CLEAN_REPO_NAME=${RAW_REPO_NAME#*//}
      export CLEAN_BRANCH_NAME=$_HEAD_BRANCH
    else 
      echo "üò∫ THIS IS A DIRECT MAIN BRANCH COMMIT, NOT A PR, _HEAD_REPO_URL is unset"
      export CLEAN_REPO_NAME="github.com/GoogleCloudPlatform/gke-poc-toolkit//terraform/modules/"
      export CLEAN_BRANCH_NAME="main"
    fi
    echo "üåü REPO INFO: NAME: $$CLEAN_REPO_NAME, BRANCH: $$CLEAN_BRANCH_NAME"
    TIMESTAMP=`date "+%m%d%y-%H%M%S"`
    TEST_PROJECT_ID="gpt4-$$TIMESTAMP"
    echo $$TEST_PROJECT_ID > /workspace/test-project-id.txt
    gcloud projects create $$TEST_PROJECT_ID --folder="$$FOLDER_ID" 
    gcloud projects add-iam-policy-binding $$TEST_PROJECT_ID --member=serviceAccount:152393131587@cloudbuild.gserviceaccount.com --role=roles/owner
    sleep 10
    gcloud services enable cloudbilling.googleapis.com --project=$$TEST_PROJECT_ID
    gcloud alpha billing projects link $$TEST_PROJECT_ID --billing-account $$BILLING_ID
  secretEnv: ['FOLDER_ID', 'BILLING_ID']  
- name: 'gcr.io/gkepoctoolkit/e2etest:latest'
  id: test-cli-compile
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    TEST_PROJECT_ID=$(cat "/workspace/test-project-id.txt")
    pwd 
    ls
    cd cli
    go build
    mkdir -p /workspace/test 
    cp ./gkekitctl /workspace/test
    cd /workspace/test 
    chmod +x ./gkekitctl
- name: 'gcr.io/gkepoctoolkit/e2etest:latest'
  id: test-gkekitctl-init
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    printenv
    cd /workspace/test
    ./gkekitctl init
    if [ -n "$_HEAD_REPO_URL" ]
    then 
      echo "‚¨ÜÔ∏è THIS IS A PR- _HEAD_REPO_URL is set ($_HEAD_REPO_URL)" 
      RAW_REPO_NAME="$_HEAD_REPO_URL//terraform/modules/"
      export CLEAN_REPO_NAME=${RAW_REPO_NAME#*//}
      export CLEAN_BRANCH_NAME=$_HEAD_BRANCH
    else 
      echo "üò∫ THIS IS A DIRECT MAIN BRANCH COMMIT, NOT A PR, _HEAD_REPO_URL is unset"
      export CLEAN_REPO_NAME="github.com/GoogleCloudPlatform/gke-poc-toolkit//terraform/modules/"
      export CLEAN_BRANCH_NAME="main"
    fi
    echo "üåü REPO INFO: NAME: $$CLEAN_REPO_NAME, BRANCH: $$CLEAN_BRANCH_NAME"
    TEST_PROJECT_ID=$(cat "/workspace/test-project-id.txt")
    sed -i 's|.*tfModuleRepo.*|tfModuleRepo: '"$$CLEAN_REPO_NAME"'|' samples/four-clusters-standalone-vpc.yaml
    sed -i 's|.*tfModuleBranch.*|tfModuleBranch: '"$$CLEAN_BRANCH_NAME"'|' samples/four-clusters-standalone-vpc.yaml
    sed -i 's|.*clustersProjectId.*|clustersProjectId: '"$$TEST_PROJECT_ID"'|' samples/four-clusters-standalone-vpc.yaml
    sed -i 's|.*governanceProjectId.*|governanceProjectId: '"$$TEST_PROJECT_ID"'|' samples/four-clusters-standalone-vpc.yaml
    sed -i 's|.*vpcProjectId.*|  vpcProjectId: '"$$TEST_PROJECT_ID"'|' samples/four-clusters-standalone-vpc.yaml
    echo "Final config for testing..."
    cat samples/four-clusters-standalone-vpc.yaml
- name: 'gcr.io/gkepoctoolkit/e2etest:latest'
  id: test-gkekitctl-create
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    cd /workspace/test
    TEST_PROJECT_ID=$(cat "/workspace/test-project-id.txt")
    gcloud config set project $$TEST_PROJECT_ID
    gcloud auth list
    ./gkekitctl create --config samples/four-clusters-standalone-vpc.yaml
timeout: "60m"
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/folder-id/versions/latest
    env: 'FOLDER_ID'
  - versionName: projects/${PROJECT_ID}/secrets/billing-id/versions/latest
    env: 'BILLING_ID'