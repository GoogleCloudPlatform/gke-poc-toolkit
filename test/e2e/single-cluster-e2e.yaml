steps:
- name: 'gcr.io/cloud-builders/gcloud:latest'
  id: project-setup
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "Creating test GCP project..."
    echo `gcloud config list account --format "value(core.account)"`
    echo "REPO NAME: ${REPO_NAME}"
    TIMESTAMP=`date "+%m%d%y-%H%M%S"`
    TEST_PROJECT_ID="gpt-$BRANCH_NAME-$$TIMESTAMP"
    echo $$TEST_PROJECT_ID
    echo $$TEST_PROJECT_ID > /workspace/test-project-id.txt
    gcloud projects create $$TEST_PROJECT_ID --folder="$$FOLDER_ID" 
    echo "Project created. Granting Cloud Build project owner role on test project..."
    gcloud projects add-iam-policy-binding $$TEST_PROJECT_ID --member=serviceAccount:152393131587@cloudbuild.gserviceaccount.com --role=roles/owner
    echo "Enabling billing API..."
    gcloud services enable cloudbilling.googleapis.com --project=$$TEST_PROJECT_ID
    echo "Linking billing account..."
    gcloud alpha billing projects link $$TEST_PROJECT_ID --billing-account $$BILLING_ID
  secretEnv: ['FOLDER_ID', 'BILLING_ID']
# TODO - add golang and terraform linting    
# - name: 'gcr.io/gkepoctoolkit/e2etest:latest'
#   id: test-compile
#   entrypoint: 'bash'
#   args:
#   - '-eEuo'
#   - 'pipefail'
#   - '-c'
#   - |-
#     echo "ðŸ“¦ Building gkekitctl..."
#     cd cli
#     go build
#     mkdir -p /workspace/test 
#     cp ./gkekitctl /workspace/test
#     cd /workspace/test 
#     chmod +x ./gkekitctl
# - name: 'gcr.io/gkepoctoolkit/e2etest:latest'
#   id: test-functional-default-config
#   entrypoint: 'bash'
#   args:
#   - '-eEuo'
#   - 'pipefail'
#   - '-c'
#   - |-
#     cd /workspace/test
#     ./gkekitctl init
#     ./gkekitctl create
# TODO after init, change the repo + branch to be the cloud build vars
# TODO need to make sure we clean up the project no matter what. ("finally")
# - name: 'gcr.io/cloud-builders/gcloud:latest'
#   id: cleanup
#   entrypoint: 'bash'
#   args:
#   - '-eEuo'
#   - 'pipefail'
#   - '-c'
#   - |-
#     TEST_PROJECT_ID=`cat /workspace/test-project-id.txt`
#     echo "ðŸ§¹ Deleting project: $$TEST_PROJECT_ID"
#     gcloud projects delete --quiet $$TEST_PROJECT_ID
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/folder-id/versions/latest
    env: 'FOLDER_ID'
  - versionName: projects/${PROJECT_ID}/secrets/billing-id/versions/latest
    env: 'BILLING_ID'
